### Python Django - Writing Your First Django App, Part 8 ###
-------------------------------------------------------------
This tutorial begins where Part 7 left off. We've built our web-poll application and will now look at third-party packages. One of Django's strengths is 
the rich ecosystem of third-pary packages. They're community developed packages that can be used to quickly improve the feature set of an application.

This tutorial will show how to add 'Django Debug Toolbar', a commonly used third-party package. The Django Debug Toolbar has ranked in the top three
most used third-party packages in the Django Developers Survey in recent years.

Installing Django Debug Toolbar
-------------------------------
Django Debug Toolar is a useful tool for debugging Django web applications. It's a third-party package that is maintained by the community organization
'Django commons'. The toolbar helps your understand how your application functions and to identify problems. It does so by providing panels that
provlde debug information about the current request and response.

To install a third-party application like the toolbar, you need to install the package by running the below command within an activated virtual
environment. This is similar to our earlier step in instal Django.
...\> py -m pip instal django-debug-toolbar

Third-party packages that integrate with Django need some post-installation setup to integrate them with your project. Often you will need to add
the package's Django app to your 'INSTALLED_APPS' setting. Some packages need other changes, like additions to your URLconf ('urls.py').

Django Debug Toolbar requires several steup steps. Follow them in its installation guide. The steps are not duplicated in this tutorial, because
as a third-party package, it may change separately to Django's schedule.

Once installed, you should be able to see the DjDT "handle" on the right side of the browser window when you browse to 'http://localhost:8000/admin/'.
Click it to open the debug toolbar and use the tools in each panel. See the 'panels documentation page' for more information on what the panels show.

Getting Help From Others
------------------------
At some point you will run into a problem, for example the toolbar may not render. When this happens and you're unable to resolve the issue yourself,
there are options available to you.

1. If the problem is with a specific package, check if there's a troubleshooting of FAQ in the package's documentation. For example the Django
   Debug Toolbar has a 'Tips section' that outlines throubleshooting options.
2. Search for similar issues on the package's issue tracker. Django Debug Toolar's is on GitHub.
3. Consult the Django Forum.
4. Join the Django Discord server.

Installing Other Third-Party Packages
-------------------------------------
There are many more third-party oackages, which you can find using the fantastic Django resource, 'Django packages'.

It can difficult to know what third-party packages you should use. This depends on your needs and goals. Sometimes it's fine to use a package
that's in its alpha state. Other times, you need to know it's production ready. Adam Johnson has a blog post that outlines a set of characteristics
that qualifies a package as "well maintained". Django Packages shows data for some of these characteristics, such as when the package was last
updated.

As Adam points out in his post, when the answer to one of the question is "no", that's an opportunity to contribute.

What's Next?
------------
The beginner tutotial ends here. In the meantime, you might want to check out some pointers on 'where to go from here'.

If you are familiar with Python packaging and interested in learning how to turn polls into a "reusable app", check out
'Advanced Tutorial: How to Write Reusable Apps'.